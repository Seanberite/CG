#version 150

out vec4 outColor;
in vec2 texCoord;
in vec3 exNormal;
in vec3 exSurfPos;
in vec3 height;

uniform sampler2D objectTexture;
uniform vec3 lightSourcesDirPosArr[10];
uniform vec3 lightSourcesColorArr[10];
uniform int isDirectional[10];
uniform float specularExponent[10];



uniform mat4 mdlMatrix;
uniform mat4 cameraMatrix;

void main(void)
{
	float ambientAmount = 0.2;
	float diffuseAmount;
	float specularAmount; 
	
	vec3 ambientVec = vec3(ambientAmount);
	vec3 diffuseVec = vec3(0.0);
	vec3 specularVec = vec3(0.0);
	vec4 totalLightVec = vec4(0.0);
	
	for(int i = 0; i<1; i++){
		if(isDirectional[i]==1){
				vec3 lightDir = normalize(mat3(cameraMatrix) * lightSourcesDirPosArr[i]);
				diffuseAmount = max(0,dot(lightDir, normalize(exNormal)));
				diffuseVec = diffuseVec + (diffuseAmount*lightSourcesColorArr[i]);
				
				vec3 surfToCam =  normalize(- exSurfPos);
				specularAmount = pow(max(0,dot(normalize(2*normalize(exNormal)*dot(lightDir, normalize(exNormal))- lightDir), surfToCam)), specularExponent[i]);		
				specularVec = specularVec + lightSourcesColorArr[i]*specularAmount;
			}
		else{
			vec4 temp = cameraMatrix*vec4(lightSourcesDirPosArr[i], 1.0);
			vec3 lightSourcePos = temp.xyz / temp.w;
			vec3 surfToSource = normalize(lightSourcePos - exSurfPos);

			vec3 reflectVec = normalize(2*normalize(exNormal)*dot(surfToSource, normalize(exNormal))- surfToSource);

			vec3 surfToCam =  normalize(- exSurfPos);
			specularAmount = pow(max(0,dot(reflectVec,surfToCam)), specularExponent[i]);
			
			specularVec = specularVec + (lightSourcesColorArr[i]*specularAmount);
			

			diffuseAmount = max(0,dot(normalize(exNormal),surfToSource));
			diffuseVec = diffuseVec + (lightSourcesColorArr[i] * diffuseAmount);
			
			}
	
			
		}
		totalLightVec = vec4(diffuseVec+ambientVec+specularVec, 1.0);
		vec4 p = texture(objectTexture, texCoord);
		outColor = vec4(totalLightVec.x*p.r, totalLightVec.y*p.g, totalLightVec.z*p.b, p.a);
	

}
